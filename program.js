// Generated by CoffeeScript 1.8.0

/*xcercise 5: Filtered LS */


/*
fs = require('fs')
path = require('path')

fs.readdir process.argv[2], (err,files) -> (console.log file if (path.extname(file) == "." + process.argv[3])) for file in files
 */


/*Excercise 6: Make It Modular */


/*

mymodule = require('./mymodule')
dir = process.argv[2]
extension = process.argv[3]

mymodule(dir, extension, (err,files) -> 

		console.error("error", err) if err

		console.log(file) for file in files

	)
 */


/*Excercise 7: HTTP client */


/*
http = require('http')
url = process.argv[2]

http.get(url, (response)->
		response.setEncoding('utf8')
		response.on('data', console.log)
		response.on('error', console.error)
		true
	)
 */


/*Excercise 8: HTTP Collect */


/*
http = require('http')
bl = require('bl')

url = process.argv[2]

http.get url, (response)->
	response.pipe( bl((err,data)-> 
			console.error(err) if err
			data = data.toString()
			console.log data.length 
			console.log data 
		))
 */


/* HTTP Multiple ASYNC */

(function() {
  var arr, bl, count, http, httpGet, index, _i, _len;

  http = require('http');

  bl = require('bl');

  arr = new Array(process.argv.length - 2);

  count = 0;


  /* 
  put output of response into corresponding array position
  once the last value is put into the array, log contents to the console
  use process.argv.length and count down from that value or to that value
   */

  httpGet = function(index) {
    return http.get(process.argv[index + 2], function(response) {
      response.pipe(bl((function(err, data) {
        var url_data, _i, _len, _results;
        if (err) {
          console.error(err);
        }
        arr[index] = data.toString();
        count++;
        if (count === arr.length) {
          _results = [];
          for (_i = 0, _len = arr.length; _i < _len; _i++) {
            url_data = arr[_i];
            _results.push(console.log(arr[_i]));
          }
          return _results;
        }
      })));
      return true;
    });
  };

  for (_i = 0, _len = arr.length; _i < _len; _i++) {
    index = arr[_i];
    httpGet(_i);
  }

}).call(this);
